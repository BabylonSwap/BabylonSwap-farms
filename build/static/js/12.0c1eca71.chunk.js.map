{"version":3,"sources":["config/index.ts","components/layout/Flex.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","components/Tags.tsx","views/Farms/components/FarmCard/CardHeading.tsx","hooks/useStake.ts","hooks/useUnstake.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/Input/Input.tsx","components/TokenInput/TokenInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","hooks/useApprove.ts","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/Divider.tsx","views/Farms/Farms.tsx"],"names":["BigNumber","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","FlexLayout","styled","div","Wrapper","theme","colors","primary","ExpandableSectionButton","onClick","expanded","role","color","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","process","secondPart","StyledLinkExternal","LinkExternal","text","DetailsSection","isTokenOnly","bscScanAddress","lpLabel","removed","totalValueFormated","TranslateString","useI18n","liquidityUrlPathParts","justifyContent","href","external","NoFeeTag","variant","outline","startIcon","Flex","CardHeading","Tag","depositFee","multiplier","risk","farmImage","tokenSymbol","alignItems","mb","flexDirection","useStake","pid","dispatch","useDispatch","account","useWallet","masterChefContract","useMasterchef","handleStake","useCallback","amount","a","stake","txHash","fetchFarmUserDataAsync","console","info","onStake","useUnstake","handleUnstake","unstake","onUnstake","StyledSpacer","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledInputWrapper","input","radii","default","StyledInput","Input","endAdornment","onChange","placeholder","startAdornment","value","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TokenInput","max","symbol","onSelectMax","depositFeeBP","toLocaleString","times","toString","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","title","disabled","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","rawStakedBalance","getBalanceNumber","displayBalance","useModal","onPresentDeposit","onPresentWithdraw","mr","BalanceAndCompound","HarvestAction","earnings","onReward","useHarvest","rawEarningsBalance","marginBottom","Action","CardActions","farm","ethereum","requestedApproval","setRequestedApproval","useFarmFromPid","lpAddresses","useFarmUser","allowance","lpAddress","tokenAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","lpContract","onApprove","approve","tx","useApprove","getContract","handleApprove","error","textTransform","fontSize","pr","mt","fullWidth","UnlockButton","RainbowLight","keyframes","StyledCardAccent","FCard","card","background","Divider","borderColor","ExpandingWrapper","FarmCard","cakePrice","bnbPrice","showExpandableSection","setShowExpandableSection","toLowerCase","totalValue","lpTotalInQuoteToken","QuoteToken","BNB","CAKE","Number","undefined","maximumFractionDigits","earnLabel","apy","toNumber","minimumFractionDigits","style","overflow","CardActionsContainer","FarmTabButtons","stakedOnly","setStakedOnly","isPublic","setIsPublic","useRouteMatch","url","isExact","height","Text","textSubtle","Farms","farmsProps","path","farmsLP","useFarms","usePriceCakeBusd","usePriceBnbBusd","tokenMode","fastRefresh","useRefresh","useEffect","setLpAddress","personalFarms","setPersonalFarms","activeFarms","filter","stakedOnlyFarms","userData","farmsList","farmsToDisplay","cakeRewardPerYear","eggPerBlock","poolWeight","pow","comparedTo","handleFind","fetchFarmIndex","farmIndex","log","fetchFarm","message","NotificationManager","Page","as","textAlign","exact","target","marginLeft"],"mappings":"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","file":"static/js/12.0c1eca71.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js/bignumber'\r\n\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nexport const CAKE_PER_BLOCK = new BigNumber(1)\r\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000)\r\nexport const BSC_BLOCK_TIME = 3\r\n\r\nexport const CAKE_POOL_PID = 1\r\n","import styled from 'styled-components'\r\n\r\nconst FlexLayout = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  & > * {\r\n    min-width: 280px;\r\n    max-width: 31.5%;\r\n    width: 100%;\r\n    margin: 0 8px;\r\n    margin-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default FlexLayout\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\r\n  return (\r\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\r\n      <Text color=\"primary\" bold>\r\n        {expanded ? 'Hide' : 'Details'}\r\n      </Text>\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\r\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }) => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'ETH' : quoteTokenAdresses[chainId]\r\n  const secondPart = tokenAddresses[chainId]\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import React from 'react'\r\nimport useI18n from 'hooks/useI18n'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { Address } from 'config/constants/types'\r\n\r\nexport interface ExpandableSectionProps {\r\n  isTokenOnly?: boolean\r\n  bscScanAddress?: string\r\n  removed?: boolean\r\n  totalValueFormated?: string\r\n  lpLabel?: string\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  text-decoration: none;\r\n  font-weight: normal;\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  svg {\r\n    padding-left: 4px;\r\n    height: 18px;\r\n    width: auto;\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  isTokenOnly,\r\n  bscScanAddress,\r\n  removed,\r\n  totalValueFormated,\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(316, 'Stake')}:</Text>\r\n        <StyledLinkExternal href={\r\n          isTokenOnly ?\r\n            `https://swap.babyloanswap.finance/#/swap/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n            :\r\n          `https://swap.babyloanswap.finance/#/add/${liquidityUrlPathParts}`\r\n        }>\r\n          {lpLabel}\r\n        </StyledLinkExternal>\r\n      </Flex>\r\n      {/* {!removed && (\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\r\n          <Text>{totalValueFormated}</Text>\r\n        </Flex>\r\n      )} */}\r\n      <Flex justifyContent=\"flex-start\">\r\n        <Link external href={bscScanAddress} bold={false}>\r\n          {TranslateString(356, 'View on BscScan')}\r\n        </Link>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon } from '@pancakeswap-libs/uikit'\r\n\r\nconst NoFeeTag = () => (\r\n  <Tag variant=\"success\" outline startIcon={<VerifiedIcon />}>\r\n    No Fees\r\n  </Tag>\r\n)\r\n\r\nconst RiskTag = ({ risk }) => (\r\n  <Tag variant={risk >= 3 ? 'failure' : 'success'} outline startIcon={<VerifiedIcon />}>\r\n    Risk {risk}\r\n  </Tag>\r\n)\r\n\r\nconst CoreTag = () => (\r\n  <Tag variant='secondary' outline startIcon={<VerifiedIcon />}>\r\n    Core\r\n  </Tag>\r\n)\r\n\r\nconst CommunityTag = () => (\r\n  <Tag variant='textSubtle' outline startIcon={<CommunityIcon />}>\r\n    Community\r\n  </Tag>\r\n)\r\n\r\nconst BinanceTag = () => (\r\n  <Tag variant='binance' outline startIcon={<BinanceIcon />}>\r\n    Binance\r\n  </Tag>\r\n)\r\n\r\nexport { CoreTag, CommunityTag, BinanceTag, RiskTag, NoFeeTag }\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\r\nimport { CommunityTag, CoreTag, NoFeeTag, RiskTag } from 'components/Tags'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  risk?: number\r\n  depositFee?: number\r\n  farmImage?: string\r\n  tokenSymbol?: string\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 0.25rem;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\r\n  lpLabel,\r\n  multiplier,\r\n  risk,\r\n  farmImage,\r\n  tokenSymbol,\r\n  depositFee,\r\n}) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      {/* <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} /> */}\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {depositFee === 0 ? <NoFeeTag /> : null}\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\r\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nconst useStake = (pid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await stake(masterChefContract, pid, amount, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, masterChefContract, pid],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport const useSousStake = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      if (sousId === 0) {\r\n        await stake(masterChefContract, 0, amount, account)\r\n      } else if (isUsingBnb) {\r\n        await sousStakeBnb(sousChefContract, amount, account)\r\n      } else {\r\n        await sousStake(sousChefContract, amount, account)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n    },\r\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStake\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport {\r\n  fetchFarmUserDataAsync,\r\n  updateUserStakedBalance,\r\n  updateUserBalance,\r\n  updateUserPendingReward,\r\n} from 'state/actions'\r\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nconst useUnstake = (pid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await unstake(masterChefContract, pid, amount, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, masterChefContract, pid],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23]\r\n\r\nexport const useSousUnstake = (sousId) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const isOldSyrup = SYRUPIDS.includes(sousId)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      if (sousId === 0) {\r\n        const txHash = await unstake(masterChefContract, 0, amount, account)\r\n        console.info(txHash)\r\n      } else if (isOldSyrup) {\r\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\r\n        console.info(txHash)\r\n      } else {\r\n        const txHash = await sousUnstake(sousChefContract, amount, account)\r\n        console.info(txHash)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n      dispatch(updateUserPendingReward(sousId, account))\r\n    },\r\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstake\r\n","import React, { useContext } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg'\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext)\r\n\r\n  let s: number\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6]\r\n      break\r\n    case 'sm':\r\n      s = spacing[2]\r\n      break\r\n    case 'md':\r\n    default:\r\n      s = spacing[4]\r\n  }\r\n\r\n  return <StyledSpacer size={s} />\r\n}\r\n\r\ninterface StyledSpacerProps {\r\n  size: number\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`\r\n\r\nexport default Spacer\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport Spacer from '../Spacer'\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <Spacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  )\r\n}\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\r\n  display: flex;\r\n  margin: 0;\r\n  padding: ${(props) => props.theme.spacing[4]}px;\r\n`\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n  text-align: center;\r\n`\r\n\r\nexport default ModalActions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nexport interface InputProps {\r\n  endAdornment?: React.ReactNode\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  startAdornment?: React.ReactNode\r\n  value: string\r\n}\r\n\r\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\r\n  return (\r\n    <StyledInputWrapper>\r\n      {!!startAdornment && startAdornment}\r\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\r\n      {!!endAdornment && endAdornment}\r\n    </StyledInputWrapper>\r\n  )\r\n}\r\n\r\nconst StyledInputWrapper = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.input};\r\n  border-radius: ${(props) => props.theme.radii.default};\r\n  display: flex;\r\n  height: 72px;\r\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\r\n`\r\n\r\nconst StyledInput = styled.input`\r\n  width: 100%;\r\n  background: none;\r\n  border: 0;\r\n  color: ${(props) => props.theme.colors.primary};\r\n  font-size: 18px;\r\n  flex: 1;\r\n  height: 56px;\r\n  margin: 0;\r\n  padding: 0;\r\n  outline: none;\r\n`\r\n\r\nexport default Input\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport { Button } from '@pancakeswap-libs/uikit'\r\nimport useI18n from '../../hooks/useI18n'\r\nimport Input, { InputProps } from '../Input'\r\n\r\ninterface TokenInputProps extends InputProps {\r\n  max: number | string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  depositFeeBP?: number\r\n}\r\n\r\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0 }) => {\r\n  const TranslateString = useI18n()\r\n  return (\r\n    <StyledTokenInput>\r\n      <StyledMaxText>\r\n        {max.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\r\n      </StyledMaxText>\r\n      <Input\r\n        endAdornment={\r\n          <StyledTokenAdornmentWrapper>\r\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\r\n            <StyledSpacer />\r\n            <div>\r\n              <Button size=\"sm\" onClick={onSelectMax}>\r\n                {TranslateString(452, 'Max')}\r\n              </Button>\r\n            </div>\r\n          </StyledTokenAdornmentWrapper>\r\n        }\r\n        onChange={onChange}\r\n        placeholder=\"0\"\r\n        value={value}\r\n      />\r\n      {\r\n        depositFeeBP > 0 ?\r\n          <StyledMaxText>\r\n            {TranslateString(10001, 'Deposit Fee')}: {new BigNumber(value || 0).times(depositFeeBP/10000).toString()} {symbol}\r\n          </StyledMaxText>\r\n          :\r\n          null\r\n      }\r\n\r\n    </StyledTokenInput>\r\n  )\r\n}\r\n\r\nconst StyledTokenInput = styled.div``\r\n\r\nconst StyledSpacer = styled.div`\r\n  width: ${(props) => props.theme.spacing[3]}px;\r\n`\r\n\r\nconst StyledTokenAdornmentWrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n`\r\n\r\nconst StyledMaxText = styled.div`\r\n  align-items: center;\r\n  color: ${(props) => props.theme.colors.primary};\r\n  display: flex;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  height: 44px;\r\n  justify-content: flex-end;\r\n`\r\n\r\nconst StyledTokenSymbol = styled.span`\r\n  color: ${(props) => props.theme.colors.primary};\r\n  font-weight: 700;\r\n`\r\n\r\nexport default TokenInput\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport TokenInput from 'components/TokenInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  depositFeeBP?: number\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '' , depositFeeBP = 0}) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\r\n      <TokenInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        depositFeeBP={depositFeeBP}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport TokenInput from 'components/TokenInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\r\n      <TokenInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  depositFeeBP?: number\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenBalance, tokenName, pid, depositFeeBP}) => {\r\n  const TranslateString = useI18n()\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n  const displayBalance = rawStakedBalance.toLocaleString()\r\n\r\n  const [onPresentDeposit] = useModal(<DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />)\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return rawStakedBalance === 0 ? (\r\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake')}</Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" />\r\n        </IconButton>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\r\n          <AddIcon color=\"primary\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport styled from 'styled-components'\r\nimport useStake from '../../../../hooks/useStake'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n}\r\n\r\nconst BalanceAndCompound = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n`\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\r\n  const TranslateString = useI18n()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvest(pid)\r\n  const { onStake } = useStake(pid)\r\n\r\n  const rawEarningsBalance = getBalanceNumber(earnings)\r\n  const displayBalance = rawEarningsBalance.toLocaleString()\r\n\r\n  return (\r\n    <Flex mb='8px' justifyContent='space-between' alignItems='center'>\r\n      {/* <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading> */}\r\n      <BalanceAndCompound>\r\n        {pid === 12 ?\r\n          <Button\r\n            disabled={rawEarningsBalance === 0 || pendingTx}\r\n            size='sm'\r\n            variant='secondary'\r\n            marginBottom='15px'\r\n            onClick={async () => {\r\n              setPendingTx(true)\r\n              await onStake(rawEarningsBalance.toString())\r\n              setPendingTx(false)\r\n            }}\r\n          >\r\n            {TranslateString(999, 'Compound')}\r\n          </Button>\r\n          : null}\r\n        <Button\r\n          disabled={rawEarningsBalance === 0 || pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onReward()\r\n            setPendingTx(false)\r\n          }}\r\n        >\r\n          {TranslateString(999, 'Harvest')}\r\n        </Button>\r\n      </BalanceAndCompound>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useMemo, useState, useCallback } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { provider } from 'web3-core'\r\nimport { getContract } from 'utils/erc20'\r\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\r\nimport { Farm } from 'state/types'\r\nimport { useFarmFromPid, useFarmFromSymbol, useFarmUser } from 'state/hooks'\r\nimport useI18n from 'hooks/useI18n'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  ethereum?: provider\r\n  account?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\r\n  const TranslateString = useI18n()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\r\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\r\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID];\r\n  const lpName = farm.lpSymbol.toUpperCase()\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const lpContract = useMemo(() => {\r\n    if(isTokenOnly){\r\n      return getContract(ethereum as provider, tokenAddress);\r\n    }\r\n    return getContract(ethereum as provider, lpAddress);\r\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\r\n\r\n  const { onApprove } = useApprove(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction stakedBalance={stakedBalance} tokenBalance={tokenBalance} tokenName={lpName} pid={pid} depositFeeBP={depositFeeBP} />\r\n    ) : (\r\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\r\n        {TranslateString(999, 'Approve Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\r\n          {`${farm.tokenSymbol},${farm.quoteTokenSymbol}`}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(999, 'Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {lpName}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(999, 'Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { ethers } from 'ethers'\r\nimport { useDispatch } from 'react-redux'\r\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\r\nimport { approve } from 'utils/callHelpers'\r\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\r\n\r\n// Approve a Farm\r\nexport const useApprove = (lpContract: Contract) => {\r\n  const dispatch = useDispatch()\r\n  const { account }: { account: string } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, masterChefContract, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, masterChefContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve a Pool\r\nexport const useSousApprove = (lpContract: Contract, sousId) => {\r\n  const dispatch = useDispatch()\r\n  const { account }: { account: string } = useWallet()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, sousChefContract, account)\r\n      dispatch(updateUserAllowance(sousId, account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve the lottery\r\nexport const useLotteryApprove = () => {\r\n  const { account }: { account: string } = useWallet()\r\n  const cakeContract = useCake()\r\n  const lotteryContract = useLottery()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(cakeContract, lotteryContract, account)\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, cakeContract, lotteryContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve an IFO\r\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\r\n  const { account } = useWallet()\r\n  const onApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await tokenContract.methods\r\n        .approve(spenderAddress, ethers.constants.MaxUint256)\r\n        .send({ from: account })\r\n      return tx\r\n    } catch {\r\n      return false\r\n    }\r\n  }, [account, spenderAddress, tokenContract])\r\n\r\n  return onApprove\r\n}\r\n","import React, { useMemo, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport { communityFarms } from 'config/constants'\r\nimport { Farm } from 'state/types'\r\nimport { provider } from 'web3-core'\r\nimport useI18n from 'hooks/useI18n'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n    apy?: BigNumber\r\n}\r\n\r\nconst RainbowLight = keyframes`\r\n  0% {\r\n    background-position: 0% 50%;\r\n  }\r\n  50% {\r\n    background-position: 100% 50%;\r\n  }\r\n  100% {\r\n    background-position: 0% 50%;\r\n  }\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: linear-gradient(45deg,\r\n  rgba(255, 255, 0, 1) 0%,\r\n  rgba(255, 255, 255, 1) 10%,\r\n  rgba(255, 0, 255, 1) 20%,\r\n  rgba(255, 0, 0, 1) 30%,\r\n  rgba(0, 255, 255, 1) 40%,\r\n  rgba(0, 0, 255, 1) 50%,\r\n  rgba(0, 255, 0, 1) 60%,\r\n  rgba(255, 255, 0, 1) 70%,\r\n  rgba(255, 255, 255, 1) 80%,\r\n  rgba(255, 0, 255, 1) 90%,\r\n  rgba(0, 0, 255, 1) 100%);\r\n  background-size: 600% 600%;\r\n  animation: ${RainbowLight} 5s linear infinite;\r\n  border-radius: 16px;\r\n  filter: blur(6px);\r\n  position: absolute;\r\n  top: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  left: -2px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div`\r\n  align-self: baseline;\r\n  background: ${(props) => props.theme.card.background};\r\n  border-radius: 32px;\r\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n`\r\n\r\ninterface FarmCardProps {\r\n    farm: FarmWithStakedValue\r\n    removed: boolean\r\n    cakePrice?: BigNumber\r\n    bnbPrice?: BigNumber\r\n    ethereum?: provider\r\n    account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account }) => {\r\n    const TranslateString = useI18n()\r\n\r\n    const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n    // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\r\n    // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\r\n    // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\r\n    // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n    const farmImage = farm.isTokenOnly ? farm.tokenSymbol.toLowerCase() : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\r\n\r\n    const totalValue: BigNumber = useMemo(() => {\r\n        if (!farm.lpTotalInQuoteToken) {\r\n            return null\r\n        }\r\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n            return bnbPrice.times(farm.lpTotalInQuoteToken)\r\n        }\r\n        if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n            return cakePrice.times(farm.lpTotalInQuoteToken)\r\n        }\r\n        return farm.lpTotalInQuoteToken\r\n    }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\r\n\r\n    const totalValueFormated = totalValue\r\n        ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n        : '-'\r\n\r\n    const lpLabel = farm.lpSymbol\r\n    const earnLabel = `${farm.tokenSymbol},${farm.quoteTokenSymbol}`;\r\n    const farmAPY = farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\r\n        minimumFractionDigits: 2,\r\n        maximumFractionDigits: 2,\r\n    })\r\n\r\n    const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\r\n\r\n    return (\r\n        <FCard style={{ overflow: \"hidden\" }}>\r\n            {farm.tokenSymbol === 'XBT' && <StyledCardAccent />}\r\n            <CardHeading\r\n                lpLabel={lpLabel}\r\n                multiplier={farm.multiplier}\r\n                risk={risk}\r\n                depositFee={farm.depositFeeBP}\r\n                farmImage={farmImage}\r\n                tokenSymbol={farm.tokenSymbol}\r\n            />\r\n\r\n            <Flex justifyContent='space-between'>\r\n                <Text>{TranslateString(318, 'Earn')}:</Text>\r\n                <Text bold>{earnLabel}</Text>\r\n            </Flex>\r\n            <Flex justifyContent='space-between'>\r\n                <Text style={{ fontSize: '24px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\r\n                <Text bold style={{ fontSize: '24px' }}>{0}%</Text>\r\n            </Flex>\r\n            <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\r\n            <Divider />\r\n            <ExpandableSectionButton\r\n                onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n                expanded={showExpandableSection}\r\n            />\r\n            <ExpandingWrapper expanded={showExpandableSection}>\r\n                <DetailsSection\r\n                    removed={removed}\r\n                    isTokenOnly={farm.isTokenOnly}\r\n                    bscScanAddress={\r\n                        farm.isTokenOnly ?\r\n                            `https://bscscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n                            :\r\n                            `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n                    }\r\n                    totalValueFormated={totalValueFormated}\r\n                    lpLabel={lpLabel}\r\n                    quoteTokenAdresses={quoteTokenAdresses}\r\n                    quoteTokenSymbol={quoteTokenSymbol}\r\n                    tokenAddresses={tokenAddresses}\r\n                />\r\n            </ExpandingWrapper>\r\n        </FCard>\r\n    )\r\n}\r\n\r\nexport default FarmCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useRouteMatch, Link } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem, Text, Toggle, Button } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst FarmTabButtons = ({ stakedOnly, setStakedOnly, isPublic, setIsPublic }) => {\r\n    const { url, isExact } = useRouteMatch()\r\n    const TranslateString = useI18n()\r\n\r\n    return (\r\n        <Wrapper>\r\n            {/* <ToggleWrapper>\r\n                <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} />\r\n                <Text> {TranslateString(699, 'Staked only')}</Text>\r\n            </ToggleWrapper> */}\r\n            <Button style={{ height: \"50px\" }} onClick={() => setIsPublic(true)}>\r\n                {TranslateString(698, 'Public')}\r\n            </Button>\r\n            <Button style={{ height: \"50px\" }} onClick={() => setIsPublic(false)}>\r\n                {TranslateString(700, 'Personal')}\r\n            </Button>\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default FarmTabButtons\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-bottom: 32px;\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-right: 32px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`","import styled from 'styled-components'\r\n\r\nexport default styled.div`\r\n  background-color: ${({ theme }) => theme.colors.textSubtle};\r\n  height: 1px;\r\n  margin: 0 auto 32px;\r\n  width: 100%;\r\n`\r\n","import React, { useEffect, useCallback, useState } from 'react'\r\nimport { NotificationManager } from 'react-notifications';\r\nimport styled from 'styled-components'\r\nimport { Route, useRouteMatch } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport { Image, Heading, Input, Button } from '@pancakeswap-libs/uikit'\r\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport Divider from './components/Divider'\r\nimport { fetchFarm, fetchFarmIndex } from '../../state/farms/fetchFarms'\r\n\r\nexport interface FarmsProps {\r\n    tokenMode?: boolean\r\n}\r\n\r\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\r\n    const { path } = useRouteMatch()\r\n    const TranslateString = useI18n()\r\n    const farmsLP = useFarms()\r\n    const cakePrice = usePriceCakeBusd()\r\n    const bnbPrice = usePriceBnbBusd()\r\n    const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n    const { tokenMode } = farmsProps;\r\n\r\n    const dispatch = useDispatch()\r\n    const { fastRefresh } = useRefresh()\r\n    useEffect(() => {\r\n        if (account) {\r\n            dispatch(fetchFarmUserDataAsync(account))\r\n        }\r\n    }, [account, dispatch, fastRefresh])\r\n\r\n    const [lpAddress, setLpAddress] = useState(\"\");\r\n    const [stakedOnly, setStakedOnly] = useState(false)\r\n    const [isPublic, setIsPublic] = useState(true)\r\n    const [personalFarms, setPersonalFarms] = useState([]);\r\n\r\n    const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X')\r\n    const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\r\n\r\n    const stakedOnlyFarms = activeFarms.filter(\r\n        (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n    )\r\n\r\n    // /!\\ This function will be removed soon\r\n    // This function compute the APY for each farm and will be replaced when we have a reliable API\r\n    // to retrieve assets prices against USD\r\n    const farmsList = useCallback(\r\n        (farmsToDisplay, removed: boolean) => {\r\n            // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\r\n            const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n                // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\r\n                //   return farm\r\n                // }\r\n                const cakeRewardPerBlock = new BigNumber(farm.eggPerBlock || 1).times(new BigNumber(farm.poolWeight)).div(new BigNumber(10).pow(18))\r\n                const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\r\n\r\n                let apy = cakePrice.times(cakeRewardPerYear);\r\n\r\n                let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0);\r\n\r\n                if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n                    totalValue = totalValue.times(bnbPrice);\r\n                }\r\n\r\n                if (totalValue.comparedTo(0) > 0) {\r\n                    apy = apy.div(totalValue);\r\n                }\r\n\r\n                return { ...farm, apy }\r\n            })\r\n            return farmsToDisplayWithAPY.map((farm) => (\r\n                <FarmCard\r\n                    key={farm.pid}\r\n                    farm={farm}\r\n                    removed={removed}\r\n                    bnbPrice={bnbPrice}\r\n                    cakePrice={cakePrice}\r\n                    ethereum={ethereum}\r\n                    account={account}\r\n                />\r\n            ))\r\n        },\r\n        [bnbPrice, account, cakePrice, ethereum],\r\n    )\r\n\r\n    const handleFind = async () => {\r\n        let farmIndex;\r\n        let farm;\r\n        try {\r\n            farmIndex = await fetchFarmIndex(lpAddress);\r\n            console.log(\"farmIndex\", farmIndex);\r\n            farm = await fetchFarm(farmIndex);\r\n\r\n            console.log(\"farm\", farm);\r\n            setPersonalFarms([farm]);\r\n        } catch (err: any) {\r\n            console.log(\"handle find error\", err.message);\r\n\r\n            NotificationManager.error(\"invalid address\", 'Find Farm failed');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Page>\r\n            <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n                {\r\n                    TranslateString(320, 'Stake LP Tokens To Earn Tokens')\r\n                }\r\n            </Heading>\r\n            <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n                Any Pair Created on BabylonSwap has a Farm where you can Earn Money\r\n            </Heading>\r\n            <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly} isPublic={isPublic} setIsPublic={setIsPublic} />\r\n            {isPublic ? (<div>\r\n                <Divider />\r\n                <FlexLayout>\r\n                    <Route exact path={`${path}`}>\r\n                        {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\r\n                    </Route>\r\n                </FlexLayout>\r\n            </div>) : (\r\n                <div>\r\n                    <Divider />\r\n\r\n                    <Heading as=\"h1\" size=\"md\" color=\"primary\" mb=\"10px\" style={{ textAlign: 'center' }}>\r\n                        Enter LP Contract Address\r\n                    </Heading>\r\n                    <FlexLayout>\r\n                        <Wrapper>\r\n                            <Input value={lpAddress} onChange={(e) => setLpAddress(e.target.value)} />\r\n                            <Button style={{ height: \"50px\",marginLeft:\"10px\"}} onClick={handleFind}>\r\n                                Find\r\n                            </Button>\r\n                        </Wrapper>\r\n                    </FlexLayout>\r\n                    <FlexLayout>\r\n                        {farmsList(personalFarms, false)}\r\n                    </FlexLayout>\r\n                </div>\r\n            )}\r\n        </Page>\r\n    )\r\n}\r\n\r\nexport default Farms\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-bottom: 32px;\r\n`"],"sourceRoot":""}